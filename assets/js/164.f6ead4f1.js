(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{494:function(e,t,n){"use strict";n.r(t);var a=n(33),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"engine-architecture"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#engine-architecture"}},[e._v("#")]),e._v(" Engine Architecture")]),e._v(" "),n("p",[e._v("The engine is designed with the following principles in mind: "),n("strong",[e._v("scene independence")]),e._v(" and "),n("strong",[e._v("service-orientation")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"scene-independent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scene-independent"}},[e._v("#")]),e._v(" Scene Independent")]),e._v(" "),n("p",[e._v("While Unity design promotes using scenes and prefabs composition, it's not very practical when developing visual novels.")]),e._v(" "),n("p",[e._v("All the Naninovel systems either not directly bound to a "),n("a",{attrs:{href:"https://docs.unity3d.com/ScriptReference/MonoBehaviour.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("MonoBehaviour"),n("OutboundLink")],1),e._v(" or attached to a "),n("a",{attrs:{href:"https://docs.unity3d.com/ScriptReference/Object.DontDestroyOnLoad.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("persistent"),n("OutboundLink")],1),e._v(" root "),n("a",{attrs:{href:"https://docs.unity3d.com/ScriptReference/GameObject.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GameObject"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://i.gyazo.com/9805e2ce450bc486a007cdc001f8ae13.png",alt:""}})]),e._v(" "),n("p",[e._v("The following root objects are used, depending on the environment:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("Naninovel<Runtime>")]),e._v(" for runtime (builds and editor play mode);")]),e._v(" "),n("li",[n("code",[e._v("Naninovel<Editor>")]),e._v(" for editor (outside of play mode).")])]),e._v(" "),n("p",[e._v("All the required gameobjects are created on engine initialization, which is executed automatically and asynchronously when the application starts (right after entering play mode or running a build) via a "),n("a",{attrs:{href:"https://docs.unity3d.com/ScriptReference/RuntimeInitializeOnLoadMethodAttribute.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("RuntimeInitializeOnLoadMethod"),n("OutboundLink")],1),e._v(" method. You can change this behavior by disabling "),n("code",[e._v("Initialize On Application Load")]),e._v(" property in the engine configuration and manually invoking the initialization using "),n("code",[e._v("RuntimeInitializer")]),e._v(" (for runtime) or "),n("code",[e._v("EditorInitializer")]),e._v(" (for editor) classes.")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://i.gyazo.com/f58a8af9f2f6d71286061e55fc228896.png",alt:""}})]),e._v(" "),n("p",[e._v("As the initialization process is asynchronous, either use "),n("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/",target:"_blank",rel:"noopener noreferrer"}},[e._v("async-await approach"),n("OutboundLink")],1),e._v(" when invoking the "),n("code",[e._v("InitializeAsync()")]),e._v(" method or subscribe to the static "),n("code",[e._v("Engine.OnInitialized")]),e._v(" event.")]),e._v(" "),n("p",[e._v("To completely disable and remove from memory all the engine systems, use "),n("code",[e._v("Engine.Destroy()")]),e._v(" static method.")]),e._v(" "),n("h2",{attrs:{id:"service-oriented"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#service-oriented"}},[e._v("#")]),e._v(" Service-Oriented")]),e._v(" "),n("p",[e._v("Most of the engine features are implemented via engine services. Engine service is an implementation of an "),n("code",[e._v("IEngineService")]),e._v(" interface, which handles a specific job, like executing naninovel scripts, managing actors or saving-loading the game state.")]),e._v(" "),n("p",[e._v("In case you wish to interact with an engine system, you'll most likely want to use an engine service. You can get a reference to an engine service using "),n("code",[e._v("Engine.GetService<TService>()")]),e._v(" static method, where "),n("code",[e._v("TService")]),e._v(" is the type (interface) of service you wish to reference; e.g., to get a "),n("code",[e._v("IScriptPlayer")]),e._v(" service:")]),e._v(" "),n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" player "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Engine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token generic-method"}},[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetService")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("IScriptPlayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nplayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("Stop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("You can find list of all the currently available engine services and information on how to override/add custom ones in the "),n("RouterLink",{attrs:{to:"/zh/guide/engine-services.html"}},[e._v("engine services guide")]),e._v(".")],1),e._v(" "),n("h2",{attrs:{id:"high-level-concept"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#high-level-concept"}},[e._v("#")]),e._v(" High-Level Concept")]),e._v(" "),n("p",[e._v("The following UML diagram illustrates a high-level concept of the engine architecture. Note that all the class and interface names in the diagram are organized under "),n("code",[e._v("Naninovel")]),e._v(" namespace. Eg, to reference "),n("code",[e._v("Engine")]),e._v(" class, use "),n("code",[e._v("Naninovel.Engine")]),e._v(" or "),n("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/namespaces/using-namespaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("include the namespace"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[n("object",{staticStyle:{width:"100%","max-width":"699px"},attrs:{data:"/engine-design.svg",type:"image/svg+xml"}})])])}),[],!1,null,null,null);t.default=i.exports}}]);