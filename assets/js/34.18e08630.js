(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{411:function(e,t,a){"use strict";a.r(t);var n=a(33),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"managed-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#managed-text"}},[e._v("#")]),e._v(" Managed Text")]),e._v(" "),a("p",[e._v("Managed text feature allows to manage (replace) various text elements used throughout Naninovel like the in-game UI and characters' display names using localizable documents.")]),e._v(" "),a("p",[e._v("To generate the managed text documents, use managed text tool accessible via "),a("code",[e._v("Naninovel -> Tools -> Managed Text")]),e._v(" editor context menu.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.gyazo.com/200680de85848f04a2eb51b063295c51.png",alt:"Managed Text Tool"}})]),e._v(" "),a("p",[e._v('Using "Select" button, select path to store the managed text documents (should be '),a("code",[e._v("Resources/Naninovel/Text")]),e._v(' by default) and press "Generate" button to create the documents.')]),e._v(" "),a("p",[e._v("You can also create a custom managed text document using "),a("code",[e._v("Create -> Naninovel -> Managed Text")]),e._v(" asset context menu.")]),e._v(" "),a("p",[e._v("Each line in managed text document is an expression in the following format: "),a("em",[e._v("Path")]),e._v(": "),a("em",[e._v("Value")]),e._v(", where "),a("em",[e._v("Path")]),e._v(" is the path to the text variable and "),a("em",[e._v("Value")]),e._v(' is the value of that variable. For example, here is the default contents of the "DefaultUI" document, which contains records for the built-in UI:')]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.gyazo.com/ce57c700b77818f87aabb722f2f42b78.png",alt:"Managed Text Document"}})]),e._v(" "),a("p",[e._v("You can edit the values and the changes will be applied on the next run.")]),e._v(" "),a("p",[e._v("Enabling "),a("code",[e._v("Delete Unused")]),e._v(" property will remove records in the managed text documents that are not directly referenced neither via "),a("code",[e._v("ManagedTextProvider")]),e._v(" components, nor via "),a("code",[e._v("ManagedText")]),e._v(" attributes in the source code (more on that below).")]),e._v(" "),a("h2",{attrs:{id:"managed-text-provider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#managed-text-provider"}},[e._v("#")]),e._v(" Managed Text Provider")]),e._v(" "),a("p",[e._v("It's possible to bind an arbitrary Unity game object to managed text record without any scripting via "),a("code",[e._v("ManagedTextProvider")]),e._v(" component; add the component to a game object, specify category (name of the document which will contain the record), key (name of the record inside the document) and use "),a("code",[e._v("OnValueChanged")]),e._v(" event to bind the value to a game object property.")]),e._v(" "),a("p",[e._v('Below is an example of binding a managed text record stored in "MyCustomDocument" document with key "MyCustomText" to a Untiy\'s "Text" component.')]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.gyazo.com/f47a997052674341aa3133deeea1f1cf.png",alt:""}})]),e._v(" "),a("p",[e._v("When "),a("code",[e._v("ManagedTextProvider")]),e._v(" component is used in a custom UI, text printer or choice handler, corresponding records will automatically be generated when using managed text tool (given the resources are assigned in the configuration menu); for other cases you'll have to add the records manually.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.gyazo.com/cc2ad398d1ad716cca437913553eb09c.png",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"managed-text-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#managed-text-variables"}},[e._v("#")]),e._v(" Managed Text Variables")]),e._v(" "),a("p",[e._v("It's also possible to bind managed text records with variables in the source code. For this, add "),a("code",[e._v("ManagedText")]),e._v(" attribute to a static string field in any C# script. Its value will be overwritten with the value specified in the managed text document on engine initialization.")]),e._v(" "),a("p",[e._v("Below is an example on using a managed text variable to localize a text label in a C# script.")]),e._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("using")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("Naninovel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("using")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("UnityEngine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("UI")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Inheriting our class from the Unity's text component, so we can use it as one.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("CustomLabel")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type-list"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Text")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Value of the "CustomLabel.LabelText" managed text record will be assigned ')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// to the below variable on engine initialization and updated on locale changes.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ManagedText")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"MyCustomUI"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "MyCustomUI" is the name of managed text document where the record will be kept.')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("string")])]),e._v(" LabelText "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Default Value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "Default Value" is the default value of the record.')]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("protected")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("override")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")])]),e._v(" Awake "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("base")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Awake")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n        text "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" LabelText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Assign current value of the managed text record to the label.")]),e._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Update the label when user changes the locale at runtime.")]),e._v("\n        Engine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token generic-method"}},[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetService")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("ILocalizationManager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("OnLocaleChanged "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" _ "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" LabelText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("h2",{attrs:{id:"script-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script-text"}},[e._v("#")]),e._v(" Script Text")]),e._v(" "),a("p",[e._v("It's possible to get managed text values directly from naninovel scripts. This could be handy, when it's required to use some text in the script expressions and the text should be localizable.")]),e._v(" "),a("p",[e._v('Create a managed text document named "Script" and add records using keys with '),a("code",[e._v("T_")]),e._v(" or "),a("code",[e._v("t_")]),e._v(' prefix. It\'s now possible to reference the values in script expressions; eg given the following records in the "Script" managed text document:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("T_Greeting1: Hey!\nT_Greeting2: Hello!\nT_Greeting3: Hi!\n")])])]),a("p",[e._v("— you can reference the values with:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@print {Random(T_Greeting1,T_Greeting2,T_Greeting3)}\n")])])]),a("p",[e._v('Of course, "Script" managed text document can be localized in the same way as the other documents; so when the user will select another locale, the text will automatically be referenced from the corresponding localized document.')]),e._v(" "),a("h2",{attrs:{id:"localization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localization"}},[e._v("#")]),e._v(" Localization")]),e._v(" "),a("p",[e._v("Managed text localization process resemble the one for naninovel scripts:")]),e._v(" "),a("ol",[a("li",[e._v("Generate (create, edit) the required managed text documents in a "),a("code",[e._v("Resources/Naninovel/Text")]),e._v(" folder.")]),e._v(" "),a("li",[e._v("Run the localization utility in a locale folder ("),a("code",[e._v("Resources/Naninovel/Localization/{Locale}")]),e._v(", where "),a("code",[e._v("{Locale}")]),e._v(" is the tag of the target locale).")]),e._v(" "),a("li",[e._v("The localization documents for the source managed text documents will appear in the corresponding locale folder. Use them to add or edit the translation.")])]),e._v(" "),a("p",[e._v("To update the managed text documents and their corresponding localization counterparts, first run the generate managed text utility in a "),a("code",[e._v("Resources/Naninovel/Text")]),e._v(" folder, and then the localization utility in a "),a("code",[e._v("Resources/Naninovel/Localization/{Locale}")]),e._v(" folder. Both utilities will attempt to preserve any existing modifications (managed text records and their translations) by default, so you won't have to re-write everything from scratch on each update.")]),e._v(" "),a("p",[e._v("See "),a("RouterLink",{attrs:{to:"/guide/localization.html"}},[e._v("Localization")]),e._v(" for more info on how to use the localization utility.")],1),e._v(" "),a("div",{staticClass:"custom-block example"},[a("p",{staticClass:"custom-block-title"},[e._v("EXAMPLE")]),e._v(" "),a("p",[e._v("You can find an example localization setup (including managed text) in the "),a("RouterLink",{attrs:{to:"/guide/getting-started.html#demo-project"}},[e._v("demo project")]),e._v(". Feel free to use it as a reference in case having issues setting up localization in your own project.")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);